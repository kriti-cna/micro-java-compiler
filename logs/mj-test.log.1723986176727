INFO  12:35:00,493 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  12:35:00,493 - ================= LEKSICKA ANALIZA =================
INFO  12:35:00,527 - #2 program
INFO  12:35:00,527 - #47 test301
INFO  12:35:00,527 - #47 int
INFO  12:35:00,529 - #47 niz
INFO  12:35:00,529 - #33 [
INFO  12:35:00,529 - #34 ]
INFO  12:35:00,529 - #27 ;
INFO  12:35:00,530 - #47 int
INFO  12:35:00,531 - #47 mat
INFO  12:35:00,531 - #33 [
INFO  12:35:00,531 - #34 ]
INFO  12:35:00,531 - #33 [
INFO  12:35:00,531 - #34 ]
INFO  12:35:00,531 - #27 ;
INFO  12:35:00,532 - #47 char
INFO  12:35:00,532 - #47 c
INFO  12:35:00,533 - #27 ;
INFO  12:35:00,534 - #47 bool
INFO  12:35:00,544 - #47 a
INFO  12:35:00,544 - #27 ;
INFO  12:35:00,544 - #47 int
INFO  12:35:00,544 - #47 in
INFO  12:35:00,544 - #27 ;
INFO  12:35:00,544 - #35 {
INFO  12:35:00,544 - #8 void
INFO  12:35:00,546 - #47 main
INFO  12:35:00,546 - #31 (
INFO  12:35:00,546 - #32 )
INFO  12:35:00,547 - #35 {
INFO  12:35:00,547 - #47 mat
INFO  12:35:00,548 - #24 =
INFO  12:35:00,549 - #4 new
INFO  12:35:00,550 - #47 int
INFO  12:35:00,550 - #33 [
INFO  12:35:00,550 - #46 7
INFO  12:35:00,550 - #34 ]
INFO  12:35:00,550 - #33 [
INFO  12:35:00,550 - #46 8
INFO  12:35:00,550 - #34 ]
INFO  12:35:00,550 - #27 ;
INFO  12:35:00,551 - #47 mat
INFO  12:35:00,551 - #33 [
INFO  12:35:00,551 - #46 1
INFO  12:35:00,551 - #34 ]
INFO  12:35:00,551 - #33 [
INFO  12:35:00,552 - #46 0
INFO  12:35:00,553 - #34 ]
INFO  12:35:00,553 - #24 =
INFO  12:35:00,553 - #46 3
INFO  12:35:00,553 - #27 ;
INFO  12:35:00,553 - #36 }
INFO  12:35:00,553 - #36 }
INFO  12:35:00,554 - ================= PARSIRANO STABLO =================
INFO  12:35:00,559 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VariableDeclaration(
              VarDeclaration(
                Type(
                 int
                ) [Type]
                OneVarDeclaration(
                  AddVarDecl1(
                   niz
                    Brackets(
                    ) [Brackets]
                  ) [AddVarDecl1]
                ) [OneVarDeclaration]
              ) [VarDeclaration]
            ) [VariableDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 mat
                  TwoBrackets(
                  ) [TwoBrackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               c
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             a
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           in
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          NoStatements(
          ) [NoStatements]
          DesignatorStat(
            DesignatorExpr(
              Designator(
                WithoutNamespace(
                 mat
                ) [WithoutNamespace]
                NoArrayExpression(
                ) [NoArrayExpression]
              ) [Designator]
              AssignOperation(
              ) [AssignOperation]
              PositiveStartExpr(
                SingleTerm(
                  NewTypeMat(
                    Type(
                     int
                    ) [Type]
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         7
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         8
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [NewTypeMat]
                ) [SingleTerm]
              ) [PositiveStartExpr]
            ) [DesignatorExpr]
          ) [DesignatorStat]
        ) [Statements]
        DesignatorStat(
          DesignatorExpr(
            Designator(
              WithoutNamespace(
               mat
              ) [WithoutNamespace]
              AddMatrixExpression(
                BraExpr(
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       1
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [BraExpr]
                BraExpr(
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       0
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [BraExpr]
              ) [AddMatrixExpression]
            ) [Designator]
            AssignOperation(
            ) [AssignOperation]
            PositiveStartExpr(
              SingleTerm(
                NumberConst(
                 3
                ) [NumberConst]
              ) [SingleTerm]
            ) [PositiveStartExpr]
          ) [DesignatorExpr]
        ) [DesignatorStat]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  12:35:00,559 - ================ Semanticka obrada ===================
INFO  12:35:00,562 - NEW SYMBOL
INFO  12:35:00,562 - Var niz: Arr of int, 0, 0 on line 2
INFO  12:35:00,562 - NEW SYMBOL
INFO  12:35:00,562 - Var mat: Matrix of int, 1, 0 on line 3
INFO  12:35:00,562 - NEW SYMBOL
INFO  12:35:00,562 - Var c: char, 2, 0 on line 4
INFO  12:35:00,562 - NEW SYMBOL
INFO  12:35:00,562 - Var a: boolean, 3, 0 on line 5
INFO  12:35:00,562 - NEW SYMBOL
INFO  12:35:00,562 - Var in: int, 4, 0 on line 6
INFO  12:35:00,562 - Var mat: Matrix of int, 1, 0 on line 15
INFO  12:35:00,562 - Var mat: Matrix of int, 1, 0 on line 16
INFO  12:35:00,562 - Meth main: notype, 0, 0 on line 1
INFO  12:35:46,061 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  12:35:46,062 - ================= LEKSICKA ANALIZA =================
INFO  12:35:46,086 - #2 program
INFO  12:35:46,086 - #47 test301
INFO  12:35:46,086 - #47 int
INFO  12:35:46,087 - #47 niz
INFO  12:35:46,087 - #33 [
INFO  12:35:46,087 - #34 ]
INFO  12:35:46,087 - #27 ;
INFO  12:35:46,088 - #47 int
INFO  12:35:46,088 - #47 mat
INFO  12:35:46,088 - #33 [
INFO  12:35:46,088 - #34 ]
INFO  12:35:46,088 - #33 [
INFO  12:35:46,088 - #34 ]
INFO  12:35:46,088 - #27 ;
INFO  12:35:46,089 - #47 char
INFO  12:35:46,089 - #47 c
INFO  12:35:46,089 - #27 ;
INFO  12:35:46,089 - #47 bool
INFO  12:35:46,089 - #47 a
INFO  12:35:46,089 - #27 ;
INFO  12:35:46,089 - #47 int
INFO  12:35:46,089 - #47 in
INFO  12:35:46,089 - #27 ;
INFO  12:35:46,089 - #35 {
INFO  12:35:46,089 - #8 void
INFO  12:35:46,090 - #47 main
INFO  12:35:46,090 - #31 (
INFO  12:35:46,090 - #32 )
INFO  12:35:46,091 - #35 {
INFO  12:35:46,091 - #47 mat
INFO  12:35:46,091 - #24 =
INFO  12:35:46,092 - #4 new
INFO  12:35:46,093 - #47 int
INFO  12:35:46,093 - #33 [
INFO  12:35:46,093 - #46 7
INFO  12:35:46,093 - #34 ]
INFO  12:35:46,093 - #33 [
INFO  12:35:46,093 - #46 8
INFO  12:35:46,093 - #34 ]
INFO  12:35:46,093 - #27 ;
INFO  12:35:46,093 - #47 mat
INFO  12:35:46,094 - #33 [
INFO  12:35:46,094 - #46 1
INFO  12:35:46,094 - #34 ]
INFO  12:35:46,094 - #33 [
INFO  12:35:46,094 - #46 0
INFO  12:35:46,094 - #34 ]
INFO  12:35:46,094 - #24 =
INFO  12:35:46,094 - #46 3
INFO  12:35:46,095 - #27 ;
INFO  12:35:46,095 - #36 }
INFO  12:35:46,095 - #36 }
INFO  12:35:46,096 - ================= PARSIRANO STABLO =================
INFO  12:35:46,098 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VariableDeclaration(
              VarDeclaration(
                Type(
                 int
                ) [Type]
                OneVarDeclaration(
                  AddVarDecl1(
                   niz
                    Brackets(
                    ) [Brackets]
                  ) [AddVarDecl1]
                ) [OneVarDeclaration]
              ) [VarDeclaration]
            ) [VariableDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 mat
                  TwoBrackets(
                  ) [TwoBrackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               c
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             a
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           in
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          NoStatements(
          ) [NoStatements]
          DesignatorStat(
            DesignatorExpr(
              Designator(
                WithoutNamespace(
                 mat
                ) [WithoutNamespace]
                NoArrayExpression(
                ) [NoArrayExpression]
              ) [Designator]
              AssignOperation(
              ) [AssignOperation]
              PositiveStartExpr(
                SingleTerm(
                  NewTypeMat(
                    Type(
                     int
                    ) [Type]
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         7
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         8
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [NewTypeMat]
                ) [SingleTerm]
              ) [PositiveStartExpr]
            ) [DesignatorExpr]
          ) [DesignatorStat]
        ) [Statements]
        DesignatorStat(
          DesignatorExpr(
            Designator(
              WithoutNamespace(
               mat
              ) [WithoutNamespace]
              AddMatrixExpression(
                BraExpr(
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       1
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [BraExpr]
                BraExpr(
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       0
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [BraExpr]
              ) [AddMatrixExpression]
            ) [Designator]
            AssignOperation(
            ) [AssignOperation]
            PositiveStartExpr(
              SingleTerm(
                NumberConst(
                 3
                ) [NumberConst]
              ) [SingleTerm]
            ) [PositiveStartExpr]
          ) [DesignatorExpr]
        ) [DesignatorStat]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  12:35:46,100 - ================ Semanticka obrada ===================
INFO  12:35:46,103 - NEW SYMBOL
INFO  12:35:46,103 - Var niz: Arr of int, 0, 0 on line 2
INFO  12:35:46,103 - NEW SYMBOL
INFO  12:35:46,103 - Var mat: Matrix of int, 1, 0 on line 3
INFO  12:35:46,103 - NEW SYMBOL
INFO  12:35:46,103 - Var c: char, 2, 0 on line 4
INFO  12:35:46,103 - NEW SYMBOL
INFO  12:35:46,103 - Var a: boolean, 3, 0 on line 5
INFO  12:35:46,103 - NEW SYMBOL
INFO  12:35:46,103 - Var in: int, 4, 0 on line 6
INFO  12:35:46,103 - Var mat: Matrix of int, 1, 0 on line 15
INFO  12:35:46,103 - Var mat: Matrix of int, 1, 0 on line 16
INFO  12:35:46,103 - Meth main: notype, 0, 0 on line 1
INFO  12:35:46,105 - Parser SUCCESS!
INFO  14:32:31,861 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:32:31,862 - ================= LEKSICKA ANALIZA =================
INFO  14:32:32,743 - #2 program
INFO  14:32:32,744 - #47 test301
INFO  14:32:32,744 - #47 int
INFO  14:32:32,770 - #47 niz
INFO  14:32:32,781 - #33 [
INFO  14:32:32,781 - #34 ]
INFO  14:32:32,781 - #27 ;
INFO  14:32:32,802 - #47 int
INFO  14:32:32,803 - #47 mat
INFO  14:32:32,803 - #33 [
INFO  14:32:32,803 - #34 ]
INFO  14:32:32,803 - #33 [
INFO  14:32:32,803 - #34 ]
INFO  14:32:32,803 - #27 ;
INFO  14:32:32,814 - #47 char
INFO  14:32:32,814 - #47 c
INFO  14:32:32,814 - #27 ;
INFO  14:32:32,825 - #47 bool
INFO  14:32:32,825 - #47 a
INFO  14:32:32,825 - #27 ;
INFO  14:32:32,825 - #47 int
INFO  14:32:32,825 - #47 in
INFO  14:32:32,826 - #27 ;
INFO  14:32:32,826 - #35 {
INFO  14:32:32,826 - #8 void
INFO  14:32:32,833 - #47 main
INFO  14:32:32,841 - #31 (
INFO  14:32:32,850 - #32 )
INFO  14:32:32,857 - #35 {
INFO  14:32:32,864 - #47 mat
INFO  14:32:32,873 - #24 =
INFO  14:32:32,891 - #4 new
INFO  14:32:32,906 - #47 int
INFO  14:32:32,906 - #33 [
INFO  14:32:32,906 - #46 7
INFO  14:32:32,906 - #34 ]
INFO  14:32:32,907 - #33 [
INFO  14:32:32,907 - #46 8
INFO  14:32:32,907 - #34 ]
INFO  14:32:32,907 - #27 ;
INFO  14:32:32,907 - #47 mat
INFO  14:32:32,908 - #33 [
INFO  14:32:32,908 - #46 1
INFO  14:32:32,908 - #34 ]
INFO  14:32:32,908 - #33 [
INFO  14:32:32,917 - #46 0
INFO  14:32:32,917 - #34 ]
INFO  14:32:32,917 - #24 =
INFO  14:32:32,917 - #46 3
INFO  14:32:32,917 - #27 ;
INFO  14:32:32,917 - #5 print
INFO  14:32:32,917 - #31 (
INFO  14:32:32,917 - #47 mat
INFO  14:32:32,918 - #33 [
INFO  14:32:32,918 - #46 1
INFO  14:32:32,918 - #34 ]
INFO  14:32:32,918 - #33 [
INFO  14:32:32,918 - #46 0
INFO  14:32:32,918 - #34 ]
INFO  14:32:32,918 - #32 )
INFO  14:32:32,927 - #27 ;
INFO  14:32:32,928 - #36 }
INFO  14:32:32,928 - #36 }
INFO  14:32:32,950 - ================= PARSIRANO STABLO =================
INFO  14:32:32,965 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VariableDeclaration(
              VarDeclaration(
                Type(
                 int
                ) [Type]
                OneVarDeclaration(
                  AddVarDecl1(
                   niz
                    Brackets(
                    ) [Brackets]
                  ) [AddVarDecl1]
                ) [OneVarDeclaration]
              ) [VarDeclaration]
            ) [VariableDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 mat
                  TwoBrackets(
                  ) [TwoBrackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               c
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             a
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           in
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          Statements(
            NoStatements(
            ) [NoStatements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  NoArrayExpression(
                  ) [NoArrayExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  SingleTerm(
                    NewTypeMat(
                      Type(
                       int
                      ) [Type]
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           7
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           8
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [NewTypeMat]
                  ) [SingleTerm]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          DesignatorStat(
            DesignatorExpr(
              Designator(
                WithoutNamespace(
                 mat
                ) [WithoutNamespace]
                AddMatrixExpression(
                  BraExpr(
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         1
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [BraExpr]
                  BraExpr(
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         0
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [BraExpr]
                ) [AddMatrixExpression]
              ) [Designator]
              AssignOperation(
              ) [AssignOperation]
              PositiveStartExpr(
                SingleTerm(
                  NumberConst(
                   3
                  ) [NumberConst]
                ) [SingleTerm]
              ) [PositiveStartExpr]
            ) [DesignatorExpr]
          ) [DesignatorStat]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           1
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:32:32,966 - ================ Semanticka obrada ===================
INFO  14:32:32,997 - NEW SYMBOL
INFO  14:32:32,997 - Var niz: Arr of int, 0, 0 on line 2
INFO  14:32:32,997 - NEW SYMBOL
INFO  14:32:32,997 - Var mat: Matrix of int, 1, 0 on line 3
INFO  14:32:32,997 - NEW SYMBOL
INFO  14:32:32,997 - Var c: char, 2, 0 on line 4
INFO  14:32:32,997 - NEW SYMBOL
INFO  14:32:32,997 - Var a: boolean, 3, 0 on line 5
INFO  14:32:32,997 - NEW SYMBOL
INFO  14:32:32,997 - Var in: int, 4, 0 on line 6
INFO  14:32:32,997 - Var mat: Matrix of int, 1, 0 on line 15
INFO  14:32:32,997 - Var mat: Matrix of int, 1, 0 on line 16
INFO  14:32:32,998 - Var mat: Matrix of int, 1, 0 on line 17
INFO  14:32:32,998 - Meth main: notype, 0, 0 on line 1
INFO  14:32:33,012 - Parser SUCCESS!
INFO  14:33:06,368 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:33:06,395 - #2 program
INFO  14:33:06,395 - #47 test301
INFO  14:33:06,395 - #47 int
INFO  14:33:06,396 - #47 niz
INFO  14:33:06,396 - #33 [
INFO  14:33:06,396 - #34 ]
INFO  14:33:06,396 - #27 ;
INFO  14:33:06,396 - #47 int
INFO  14:33:06,396 - #47 mat
INFO  14:33:06,396 - #33 [
INFO  14:33:06,396 - #34 ]
INFO  14:33:06,396 - #33 [
INFO  14:33:06,396 - #34 ]
INFO  14:33:06,397 - #27 ;
INFO  14:33:06,397 - #47 char
INFO  14:33:06,397 - #47 c
INFO  14:33:06,397 - #27 ;
INFO  14:33:06,397 - #47 bool
INFO  14:33:06,397 - #47 a
INFO  14:33:06,397 - #27 ;
INFO  14:33:06,397 - #47 int
INFO  14:33:06,397 - #47 in
INFO  14:33:06,397 - #27 ;
INFO  14:33:06,397 - #35 {
INFO  14:33:06,397 - #8 void
INFO  14:33:06,398 - #47 main
INFO  14:33:06,398 - #31 (
INFO  14:33:06,398 - #32 )
INFO  14:33:06,399 - #35 {
INFO  14:33:06,399 - #47 mat
INFO  14:33:06,399 - #24 =
INFO  14:33:06,400 - #4 new
INFO  14:33:06,400 - #47 int
INFO  14:33:06,400 - #33 [
INFO  14:33:06,400 - #46 7
INFO  14:33:06,400 - #34 ]
INFO  14:33:06,402 - #33 [
INFO  14:33:06,402 - #46 8
INFO  14:33:06,402 - #34 ]
INFO  14:33:06,402 - #27 ;
INFO  14:33:06,402 - #47 mat
INFO  14:33:06,402 - #33 [
INFO  14:33:06,402 - #46 1
INFO  14:33:06,402 - #34 ]
INFO  14:33:06,402 - #33 [
INFO  14:33:06,403 - #46 0
INFO  14:33:06,403 - #34 ]
INFO  14:33:06,403 - #24 =
INFO  14:33:06,403 - #46 3
INFO  14:33:06,403 - #27 ;
INFO  14:33:06,403 - #47 in
INFO  14:33:06,403 - #24 =
INFO  14:33:06,403 - #47 mat
INFO  14:33:06,403 - #33 [
INFO  14:33:06,403 - #46 1
INFO  14:33:06,403 - #34 ]
INFO  14:33:06,403 - #33 [
INFO  14:33:06,403 - #46 0
INFO  14:33:06,403 - #34 ]
INFO  14:33:06,403 - #27 ;
INFO  14:33:06,403 - #5 print
INFO  14:33:06,403 - #31 (
INFO  14:33:06,404 - #47 in
INFO  14:33:06,404 - #32 )
INFO  14:33:06,404 - #27 ;
INFO  14:33:06,404 - #5 print
INFO  14:33:06,404 - #31 (
INFO  14:33:06,404 - #47 mat
INFO  14:33:06,404 - #33 [
INFO  14:33:06,404 - #46 1
INFO  14:33:06,404 - #34 ]
INFO  14:33:06,405 - #33 [
INFO  14:33:06,405 - #46 0
INFO  14:33:06,405 - #34 ]
INFO  14:33:06,405 - #32 )
INFO  14:33:06,405 - #27 ;
INFO  14:33:06,405 - #36 }
INFO  14:33:06,405 - #36 }
INFO  14:33:06,407 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VariableDeclaration(
              VarDeclaration(
                Type(
                 int
                ) [Type]
                OneVarDeclaration(
                  AddVarDecl1(
                   niz
                    Brackets(
                    ) [Brackets]
                  ) [AddVarDecl1]
                ) [OneVarDeclaration]
              ) [VarDeclaration]
            ) [VariableDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 mat
                  TwoBrackets(
                  ) [TwoBrackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               c
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             a
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           in
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStatements(
                ) [NoStatements]
                DesignatorStat(
                  DesignatorExpr(
                    Designator(
                      WithoutNamespace(
                       mat
                      ) [WithoutNamespace]
                      NoArrayExpression(
                      ) [NoArrayExpression]
                    ) [Designator]
                    AssignOperation(
                    ) [AssignOperation]
                    PositiveStartExpr(
                      SingleTerm(
                        NewTypeMat(
                          Type(
                           int
                          ) [Type]
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               7
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               8
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [NewTypeMat]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [DesignatorExpr]
                ) [DesignatorStat]
              ) [Statements]
              DesignatorStat(
                DesignatorExpr(
                  Designator(
                    WithoutNamespace(
                     mat
                    ) [WithoutNamespace]
                    AddMatrixExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             1
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             0
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddMatrixExpression]
                  ) [Designator]
                  AssignOperation(
                  ) [AssignOperation]
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       3
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [DesignatorExpr]
              ) [DesignatorStat]
            ) [Statements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   in
                  ) [WithoutNamespace]
                  NoArrayExpression(
                  ) [NoArrayExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  SingleTerm(
                    DesignatorFact(
                      Designator(
                        WithoutNamespace(
                         mat
                        ) [WithoutNamespace]
                        AddMatrixExpression(
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                NumberConst(
                                 1
                                ) [NumberConst]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                NumberConst(
                                 0
                                ) [NumberConst]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                        ) [AddMatrixExpression]
                      ) [Designator]
                    ) [DesignatorFact]
                  ) [SingleTerm]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          PrintExpr(
            PositiveStartExpr(
              SingleTerm(
                DesignatorFact(
                  Designator(
                    WithoutNamespace(
                     in
                    ) [WithoutNamespace]
                    NoArrayExpression(
                    ) [NoArrayExpression]
                  ) [Designator]
                ) [DesignatorFact]
              ) [SingleTerm]
            ) [PositiveStartExpr]
            NoNumConstOpt(
            ) [NoNumConstOpt]
          ) [PrintExpr]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           1
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:33:06,408 - ===================================
INFO  14:33:06,410 - Prepoznata naredba Print!
INFO  14:33:06,410 - Prepoznata naredba Print!
INFO  14:33:06,410 -  Print count calls = 2
INFO  14:33:10,473 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:33:10,474 - ================= LEKSICKA ANALIZA =================
INFO  14:33:10,498 - #2 program
INFO  14:33:10,498 - #47 test301
INFO  14:33:10,498 - #47 int
INFO  14:33:10,500 - #47 niz
INFO  14:33:10,500 - #33 [
INFO  14:33:10,500 - #34 ]
INFO  14:33:10,500 - #27 ;
INFO  14:33:10,500 - #47 int
INFO  14:33:10,502 - #47 mat
INFO  14:33:10,502 - #33 [
INFO  14:33:10,502 - #34 ]
INFO  14:33:10,502 - #33 [
INFO  14:33:10,502 - #34 ]
INFO  14:33:10,502 - #27 ;
INFO  14:33:10,503 - #47 char
INFO  14:33:10,503 - #47 c
INFO  14:33:10,503 - #27 ;
INFO  14:33:10,504 - #47 bool
INFO  14:33:10,504 - #47 a
INFO  14:33:10,504 - #27 ;
INFO  14:33:10,504 - #47 int
INFO  14:33:10,505 - #47 in
INFO  14:33:10,505 - #27 ;
INFO  14:33:10,505 - #35 {
INFO  14:33:10,505 - #8 void
INFO  14:33:10,505 - #47 main
INFO  14:33:10,506 - #31 (
INFO  14:33:10,506 - #32 )
INFO  14:33:10,506 - #35 {
INFO  14:33:10,507 - #47 mat
INFO  14:33:10,507 - #24 =
INFO  14:33:10,508 - #4 new
INFO  14:33:10,508 - #47 int
INFO  14:33:10,508 - #33 [
INFO  14:33:10,508 - #46 7
INFO  14:33:10,508 - #34 ]
INFO  14:33:10,510 - #33 [
INFO  14:33:10,510 - #46 8
INFO  14:33:10,510 - #34 ]
INFO  14:33:10,510 - #27 ;
INFO  14:33:10,510 - #47 mat
INFO  14:33:10,510 - #33 [
INFO  14:33:10,510 - #46 1
INFO  14:33:10,511 - #34 ]
INFO  14:33:10,511 - #33 [
INFO  14:33:10,512 - #46 0
INFO  14:33:10,512 - #34 ]
INFO  14:33:10,512 - #24 =
INFO  14:33:10,513 - #46 3
INFO  14:33:10,513 - #27 ;
INFO  14:33:10,513 - #47 in
INFO  14:33:10,513 - #24 =
INFO  14:33:10,513 - #47 mat
INFO  14:33:10,513 - #33 [
INFO  14:33:10,513 - #46 1
INFO  14:33:10,513 - #34 ]
INFO  14:33:10,513 - #33 [
INFO  14:33:10,513 - #46 0
INFO  14:33:10,514 - #34 ]
INFO  14:33:10,514 - #27 ;
INFO  14:33:10,514 - #5 print
INFO  14:33:10,514 - #31 (
INFO  14:33:10,514 - #47 in
INFO  14:33:10,514 - #32 )
INFO  14:33:10,515 - #27 ;
INFO  14:33:10,515 - #5 print
INFO  14:33:10,515 - #31 (
INFO  14:33:10,515 - #47 mat
INFO  14:33:10,515 - #33 [
INFO  14:33:10,515 - #46 1
INFO  14:33:10,515 - #34 ]
INFO  14:33:10,517 - #33 [
INFO  14:33:10,517 - #46 0
INFO  14:33:10,517 - #34 ]
INFO  14:33:10,517 - #32 )
INFO  14:33:10,517 - #27 ;
INFO  14:33:10,517 - #36 }
INFO  14:33:10,517 - #36 }
INFO  14:33:10,518 - ================= PARSIRANO STABLO =================
INFO  14:33:10,520 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VariableDeclaration(
              VarDeclaration(
                Type(
                 int
                ) [Type]
                OneVarDeclaration(
                  AddVarDecl1(
                   niz
                    Brackets(
                    ) [Brackets]
                  ) [AddVarDecl1]
                ) [OneVarDeclaration]
              ) [VarDeclaration]
            ) [VariableDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 mat
                  TwoBrackets(
                  ) [TwoBrackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               c
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             a
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           in
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStatements(
                ) [NoStatements]
                DesignatorStat(
                  DesignatorExpr(
                    Designator(
                      WithoutNamespace(
                       mat
                      ) [WithoutNamespace]
                      NoArrayExpression(
                      ) [NoArrayExpression]
                    ) [Designator]
                    AssignOperation(
                    ) [AssignOperation]
                    PositiveStartExpr(
                      SingleTerm(
                        NewTypeMat(
                          Type(
                           int
                          ) [Type]
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               7
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               8
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [NewTypeMat]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [DesignatorExpr]
                ) [DesignatorStat]
              ) [Statements]
              DesignatorStat(
                DesignatorExpr(
                  Designator(
                    WithoutNamespace(
                     mat
                    ) [WithoutNamespace]
                    AddMatrixExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             1
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             0
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddMatrixExpression]
                  ) [Designator]
                  AssignOperation(
                  ) [AssignOperation]
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       3
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [DesignatorExpr]
              ) [DesignatorStat]
            ) [Statements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   in
                  ) [WithoutNamespace]
                  NoArrayExpression(
                  ) [NoArrayExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  SingleTerm(
                    DesignatorFact(
                      Designator(
                        WithoutNamespace(
                         mat
                        ) [WithoutNamespace]
                        AddMatrixExpression(
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                NumberConst(
                                 1
                                ) [NumberConst]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                NumberConst(
                                 0
                                ) [NumberConst]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                        ) [AddMatrixExpression]
                      ) [Designator]
                    ) [DesignatorFact]
                  ) [SingleTerm]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          PrintExpr(
            PositiveStartExpr(
              SingleTerm(
                DesignatorFact(
                  Designator(
                    WithoutNamespace(
                     in
                    ) [WithoutNamespace]
                    NoArrayExpression(
                    ) [NoArrayExpression]
                  ) [Designator]
                ) [DesignatorFact]
              ) [SingleTerm]
            ) [PositiveStartExpr]
            NoNumConstOpt(
            ) [NoNumConstOpt]
          ) [PrintExpr]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           1
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:33:10,521 - ================ Semanticka obrada ===================
INFO  14:33:10,523 - NEW SYMBOL
INFO  14:33:10,523 - Var niz: Arr of int, 0, 0 on line 2
INFO  14:33:10,523 - NEW SYMBOL
INFO  14:33:10,523 - Var mat: Matrix of int, 1, 0 on line 3
INFO  14:33:10,523 - NEW SYMBOL
INFO  14:33:10,523 - Var c: char, 2, 0 on line 4
INFO  14:33:10,523 - NEW SYMBOL
INFO  14:33:10,523 - Var a: boolean, 3, 0 on line 5
INFO  14:33:10,523 - NEW SYMBOL
INFO  14:33:10,523 - Var in: int, 4, 0 on line 6
INFO  14:33:10,523 - Var mat: Matrix of int, 1, 0 on line 15
INFO  14:33:10,523 - Var mat: Matrix of int, 1, 0 on line 16
INFO  14:33:10,523 - Var in: int, 4, 0 on line 17
INFO  14:33:10,523 - Var mat: Matrix of int, 1, 0 on line 17
INFO  14:33:10,524 - Var in: int, 4, 0 on line 18
INFO  14:33:10,524 - Var mat: Matrix of int, 1, 0 on line 19
INFO  14:33:10,524 - Meth main: notype, 0, 0 on line 1
INFO  14:33:10,526 - Parser SUCCESS!
INFO  14:34:41,976 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:34:41,976 - ================= LEKSICKA ANALIZA =================
INFO  14:34:42,001 - #2 program
INFO  14:34:42,002 - #47 test301
INFO  14:34:42,002 - #47 int
INFO  14:34:42,003 - #47 niz
INFO  14:34:42,004 - #33 [
INFO  14:34:42,004 - #34 ]
INFO  14:34:42,004 - #27 ;
INFO  14:34:42,004 - #47 int
INFO  14:34:42,004 - #47 mat
INFO  14:34:42,004 - #33 [
INFO  14:34:42,004 - #34 ]
INFO  14:34:42,004 - #33 [
INFO  14:34:42,004 - #34 ]
INFO  14:34:42,005 - #27 ;
INFO  14:34:42,005 - #47 char
INFO  14:34:42,005 - #47 c
INFO  14:34:42,005 - #27 ;
INFO  14:34:42,005 - #47 bool
INFO  14:34:42,005 - #47 a
INFO  14:34:42,005 - #27 ;
INFO  14:34:42,005 - #47 int
INFO  14:34:42,005 - #47 in
INFO  14:34:42,005 - #27 ;
INFO  14:34:42,005 - #35 {
INFO  14:34:42,005 - #8 void
INFO  14:34:42,006 - #47 main
INFO  14:34:42,006 - #31 (
INFO  14:34:42,006 - #32 )
INFO  14:34:42,006 - #35 {
INFO  14:34:42,008 - #47 mat
INFO  14:34:42,008 - #24 =
INFO  14:34:42,008 - #4 new
INFO  14:34:42,009 - #47 int
INFO  14:34:42,009 - #33 [
INFO  14:34:42,009 - #46 7
INFO  14:34:42,009 - #34 ]
INFO  14:34:42,009 - #33 [
INFO  14:34:42,009 - #46 8
INFO  14:34:42,009 - #34 ]
INFO  14:34:42,009 - #27 ;
INFO  14:34:42,009 - #47 mat
INFO  14:34:42,009 - #33 [
INFO  14:34:42,009 - #46 1
INFO  14:34:42,009 - #34 ]
INFO  14:34:42,010 - #33 [
INFO  14:34:42,010 - #46 0
INFO  14:34:42,010 - #34 ]
INFO  14:34:42,010 - #24 =
INFO  14:34:42,010 - #46 3
INFO  14:34:42,010 - #27 ;
INFO  14:34:42,010 - #47 in
INFO  14:34:42,010 - #24 =
INFO  14:34:42,010 - #47 mat
INFO  14:34:42,010 - #33 [
INFO  14:34:42,010 - #46 1
INFO  14:34:42,010 - #34 ]
INFO  14:34:42,010 - #33 [
INFO  14:34:42,011 - #46 0
INFO  14:34:42,011 - #34 ]
INFO  14:34:42,011 - #27 ;
INFO  14:34:42,011 - #5 print
INFO  14:34:42,011 - #31 (
INFO  14:34:42,011 - #47 in
INFO  14:34:42,011 - #32 )
INFO  14:34:42,011 - #27 ;
INFO  14:34:42,011 - #5 print
INFO  14:34:42,012 - #31 (
INFO  14:34:42,012 - #47 mat
INFO  14:34:42,012 - #33 [
INFO  14:34:42,012 - #46 1
INFO  14:34:42,012 - #34 ]
INFO  14:34:42,012 - #33 [
INFO  14:34:42,012 - #46 0
INFO  14:34:42,012 - #34 ]
INFO  14:34:42,012 - #32 )
INFO  14:34:42,012 - #27 ;
INFO  14:34:42,012 - #47 mat
INFO  14:34:42,012 - #33 [
INFO  14:34:42,012 - #46 0
INFO  14:34:42,012 - #34 ]
INFO  14:34:42,012 - #33 [
INFO  14:34:42,012 - #46 3
INFO  14:34:42,012 - #12 -
INFO  14:34:42,012 - #46 4
INFO  14:34:42,029 - #11 +
INFO  14:34:42,029 - #46 2
INFO  14:34:42,040 - #34 ]
INFO  14:34:42,040 - #24 =
INFO  14:34:42,040 - #46 100
INFO  14:34:42,040 - #27 ;
INFO  14:34:42,040 - #5 print
INFO  14:34:42,040 - #31 (
INFO  14:34:42,040 - #47 mat
INFO  14:34:42,040 - #33 [
INFO  14:34:42,040 - #46 0
INFO  14:34:42,040 - #34 ]
INFO  14:34:42,040 - #33 [
INFO  14:34:42,040 - #46 3
INFO  14:34:42,040 - #12 -
INFO  14:34:42,040 - #46 4
INFO  14:34:42,040 - #11 +
INFO  14:34:42,040 - #46 2
INFO  14:34:42,040 - #34 ]
INFO  14:34:42,040 - #27 ;
ERROR 14:34:42,040 - 
Sintaksna greska on line 21
ERROR 14:34:42,040 - Fatalna greska, parsiranje se ne moze nastaviti on line 21
INFO  14:34:42,041 - ================= PARSIRANO STABLO =================
INFO  14:36:11,760 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:36:11,760 - ================= LEKSICKA ANALIZA =================
INFO  14:36:11,786 - #2 program
INFO  14:36:11,786 - #47 test301
INFO  14:36:11,786 - #47 int
INFO  14:36:11,787 - #47 niz
INFO  14:36:11,787 - #33 [
INFO  14:36:11,787 - #34 ]
INFO  14:36:11,787 - #27 ;
INFO  14:36:11,788 - #47 int
INFO  14:36:11,788 - #47 mat
INFO  14:36:11,788 - #33 [
INFO  14:36:11,788 - #34 ]
INFO  14:36:11,788 - #33 [
INFO  14:36:11,788 - #34 ]
INFO  14:36:11,788 - #27 ;
INFO  14:36:11,789 - #47 char
INFO  14:36:11,789 - #47 c
INFO  14:36:11,789 - #27 ;
INFO  14:36:11,789 - #47 bool
INFO  14:36:11,789 - #47 a
INFO  14:36:11,789 - #27 ;
INFO  14:36:11,789 - #47 int
INFO  14:36:11,789 - #47 in
INFO  14:36:11,789 - #27 ;
INFO  14:36:11,789 - #35 {
INFO  14:36:11,789 - #8 void
INFO  14:36:11,790 - #47 main
INFO  14:36:11,790 - #31 (
INFO  14:36:11,790 - #32 )
INFO  14:36:11,791 - #35 {
INFO  14:36:11,791 - #47 mat
INFO  14:36:11,791 - #24 =
INFO  14:36:11,792 - #4 new
INFO  14:36:11,793 - #47 int
INFO  14:36:11,793 - #33 [
INFO  14:36:11,793 - #46 2
INFO  14:36:11,793 - #34 ]
INFO  14:36:11,793 - #33 [
INFO  14:36:11,793 - #46 3
INFO  14:36:11,793 - #34 ]
INFO  14:36:11,793 - #27 ;
INFO  14:36:11,794 - #47 mat
INFO  14:36:11,794 - #33 [
INFO  14:36:11,794 - #47 nula
INFO  14:36:11,794 - #34 ]
INFO  14:36:11,794 - #33 [
INFO  14:36:11,796 - #47 jedan
INFO  14:36:11,796 - #12 -
INFO  14:36:11,796 - #46 1
INFO  14:36:11,797 - #34 ]
INFO  14:36:11,797 - #24 =
INFO  14:36:11,797 - #47 jedan
INFO  14:36:11,797 - #27 ;
INFO  14:36:11,797 - #47 mat
INFO  14:36:11,797 - #33 [
INFO  14:36:11,797 - #46 0
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #47 mat
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #46 0
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #46 0
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,798 - #24 =
INFO  14:36:11,798 - #46 2
INFO  14:36:11,798 - #27 ;
INFO  14:36:11,798 - #47 mat
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #46 0
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #47 mat
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #46 0
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,798 - #33 [
INFO  14:36:11,798 - #46 1
INFO  14:36:11,798 - #34 ]
INFO  14:36:11,799 - #34 ]
INFO  14:36:11,799 - #24 =
INFO  14:36:11,799 - #46 5
INFO  14:36:11,799 - #27 ;
INFO  14:36:11,799 - #47 mat
INFO  14:36:11,799 - #33 [
INFO  14:36:11,799 - #46 1
INFO  14:36:11,799 - #34 ]
INFO  14:36:11,799 - #33 [
INFO  14:36:11,799 - #47 mat
INFO  14:36:11,799 - #33 [
INFO  14:36:11,799 - #46 0
INFO  14:36:11,799 - #34 ]
INFO  14:36:11,799 - #33 [
INFO  14:36:11,799 - #46 0
INFO  14:36:11,799 - #34 ]
INFO  14:36:11,799 - #13 *
INFO  14:36:11,799 - #46 2
INFO  14:36:11,824 - #34 ]
INFO  14:36:11,824 - #24 =
INFO  14:36:11,824 - #46 4
INFO  14:36:11,824 - #27 ;
INFO  14:36:11,824 - #47 mat
INFO  14:36:11,824 - #33 [
INFO  14:36:11,824 - #47 mat
INFO  14:36:11,824 - #33 [
INFO  14:36:11,824 - #46 0
INFO  14:36:11,824 - #34 ]
INFO  14:36:11,824 - #33 [
INFO  14:36:11,824 - #46 0
INFO  14:36:11,824 - #34 ]
INFO  14:36:11,824 - #34 ]
INFO  14:36:11,825 - #33 [
INFO  14:36:11,825 - #46 1
INFO  14:36:11,825 - #34 ]
INFO  14:36:11,825 - #24 =
INFO  14:36:11,825 - #46 3
INFO  14:36:11,825 - #27 ;
INFO  14:36:11,825 - #47 mat
INFO  14:36:11,825 - #33 [
INFO  14:36:11,825 - #46 1
INFO  14:36:11,825 - #34 ]
INFO  14:36:11,825 - #33 [
INFO  14:36:11,825 - #46 0
INFO  14:36:11,825 - #34 ]
INFO  14:36:11,825 - #24 =
INFO  14:36:11,825 - #46 2
INFO  14:36:11,825 - #27 ;
INFO  14:36:11,825 - #5 print
INFO  14:36:11,825 - #31 (
INFO  14:36:11,825 - #47 mat
INFO  14:36:11,825 - #33 [
INFO  14:36:11,825 - #46 1
INFO  14:36:11,825 - #34 ]
INFO  14:36:11,826 - #33 [
INFO  14:36:11,826 - #46 2
INFO  14:36:11,826 - #34 ]
INFO  14:36:11,826 - #32 )
INFO  14:36:11,826 - #27 ;
INFO  14:36:11,826 - #5 print
INFO  14:36:11,826 - #31 (
INFO  14:36:11,826 - #47 mat
INFO  14:36:11,826 - #33 [
INFO  14:36:11,826 - #46 0
INFO  14:36:11,826 - #34 ]
INFO  14:36:11,826 - #33 [
INFO  14:36:11,827 - #46 2
INFO  14:36:11,827 - #34 ]
INFO  14:36:11,827 - #32 )
INFO  14:36:11,827 - #27 ;
INFO  14:36:11,827 - #36 }
INFO  14:36:11,827 - #36 }
INFO  14:36:11,828 - ================= PARSIRANO STABLO =================
INFO  14:36:11,832 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            VariableDeclaration(
              VarDeclaration(
                Type(
                 int
                ) [Type]
                OneVarDeclaration(
                  AddVarDecl1(
                   niz
                    Brackets(
                    ) [Brackets]
                  ) [AddVarDecl1]
                ) [OneVarDeclaration]
              ) [VarDeclaration]
            ) [VariableDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 mat
                  TwoBrackets(
                  ) [TwoBrackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               c
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             a
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           in
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStatements(
                        ) [NoStatements]
                        DesignatorStat(
                          DesignatorExpr(
                            Designator(
                              WithoutNamespace(
                               mat
                              ) [WithoutNamespace]
                              NoArrayExpression(
                              ) [NoArrayExpression]
                            ) [Designator]
                            AssignOperation(
                            ) [AssignOperation]
                            PositiveStartExpr(
                              SingleTerm(
                                NewTypeMat(
                                  Type(
                                   int
                                  ) [Type]
                                  PositiveStartExpr(
                                    SingleTerm(
                                      NumberConst(
                                       2
                                      ) [NumberConst]
                                    ) [SingleTerm]
                                  ) [PositiveStartExpr]
                                  PositiveStartExpr(
                                    SingleTerm(
                                      NumberConst(
                                       3
                                      ) [NumberConst]
                                    ) [SingleTerm]
                                  ) [PositiveStartExpr]
                                ) [NewTypeMat]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [DesignatorExpr]
                        ) [DesignatorStat]
                      ) [Statements]
                      DesignatorStat(
                        DesignatorExpr(
                          Designator(
                            WithoutNamespace(
                             mat
                            ) [WithoutNamespace]
                            AddMatrixExpression(
                              BraExpr(
                                PositiveStartExpr(
                                  SingleTerm(
                                    DesignatorFact(
                                      Designator(
                                        WithoutNamespace(
                                         nula
                                        ) [WithoutNamespace]
                                        NoArrayExpression(
                                        ) [NoArrayExpression]
                                      ) [Designator]
                                    ) [DesignatorFact]
                                  ) [SingleTerm]
                                ) [PositiveStartExpr]
                              ) [BraExpr]
                              BraExpr(
                                AddExpression(
                                  PositiveStartExpr(
                                    SingleTerm(
                                      DesignatorFact(
                                        Designator(
                                          WithoutNamespace(
                                           jedan
                                          ) [WithoutNamespace]
                                          NoArrayExpression(
                                          ) [NoArrayExpression]
                                        ) [Designator]
                                      ) [DesignatorFact]
                                    ) [SingleTerm]
                                  ) [PositiveStartExpr]
                                  Minus(
                                  ) [Minus]
                                  SingleTerm(
                                    NumberConst(
                                     1
                                    ) [NumberConst]
                                  ) [SingleTerm]
                                ) [AddExpression]
                              ) [BraExpr]
                            ) [AddMatrixExpression]
                          ) [Designator]
                          AssignOperation(
                          ) [AssignOperation]
                          PositiveStartExpr(
                            SingleTerm(
                              DesignatorFact(
                                Designator(
                                  WithoutNamespace(
                                   jedan
                                  ) [WithoutNamespace]
                                  NoArrayExpression(
                                  ) [NoArrayExpression]
                                ) [Designator]
                              ) [DesignatorFact]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [DesignatorExpr]
                      ) [DesignatorStat]
                    ) [Statements]
                    DesignatorStat(
                      DesignatorExpr(
                        Designator(
                          WithoutNamespace(
                           mat
                          ) [WithoutNamespace]
                          AddMatrixExpression(
                            BraExpr(
                              PositiveStartExpr(
                                SingleTerm(
                                  NumberConst(
                                   0
                                  ) [NumberConst]
                                ) [SingleTerm]
                              ) [PositiveStartExpr]
                            ) [BraExpr]
                            BraExpr(
                              PositiveStartExpr(
                                SingleTerm(
                                  DesignatorFact(
                                    Designator(
                                      WithoutNamespace(
                                       mat
                                      ) [WithoutNamespace]
                                      AddMatrixExpression(
                                        BraExpr(
                                          PositiveStartExpr(
                                            SingleTerm(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                            ) [SingleTerm]
                                          ) [PositiveStartExpr]
                                        ) [BraExpr]
                                        BraExpr(
                                          PositiveStartExpr(
                                            SingleTerm(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                            ) [SingleTerm]
                                          ) [PositiveStartExpr]
                                        ) [BraExpr]
                                      ) [AddMatrixExpression]
                                    ) [Designator]
                                  ) [DesignatorFact]
                                ) [SingleTerm]
                              ) [PositiveStartExpr]
                            ) [BraExpr]
                          ) [AddMatrixExpression]
                        ) [Designator]
                        AssignOperation(
                        ) [AssignOperation]
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [DesignatorExpr]
                    ) [DesignatorStat]
                  ) [Statements]
                  DesignatorStat(
                    DesignatorExpr(
                      Designator(
                        WithoutNamespace(
                         mat
                        ) [WithoutNamespace]
                        AddMatrixExpression(
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                NumberConst(
                                 0
                                ) [NumberConst]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                DesignatorFact(
                                  Designator(
                                    WithoutNamespace(
                                     mat
                                    ) [WithoutNamespace]
                                    AddMatrixExpression(
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             1
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                    ) [AddMatrixExpression]
                                  ) [Designator]
                                ) [DesignatorFact]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                        ) [AddMatrixExpression]
                      ) [Designator]
                      AssignOperation(
                      ) [AssignOperation]
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           5
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [DesignatorExpr]
                  ) [DesignatorStat]
                ) [Statements]
                DesignatorStat(
                  DesignatorExpr(
                    Designator(
                      WithoutNamespace(
                       mat
                      ) [WithoutNamespace]
                      AddMatrixExpression(
                        BraExpr(
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               1
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [BraExpr]
                        BraExpr(
                          PositiveStartExpr(
                            MultipleTerms(
                              SingleTerm(
                                DesignatorFact(
                                  Designator(
                                    WithoutNamespace(
                                     mat
                                    ) [WithoutNamespace]
                                    AddMatrixExpression(
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                    ) [AddMatrixExpression]
                                  ) [Designator]
                                ) [DesignatorFact]
                              ) [SingleTerm]
                              Multiply(
                              ) [Multiply]
                              NumberConst(
                               2
                              ) [NumberConst]
                            ) [MultipleTerms]
                          ) [PositiveStartExpr]
                        ) [BraExpr]
                      ) [AddMatrixExpression]
                    ) [Designator]
                    AssignOperation(
                    ) [AssignOperation]
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         4
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [DesignatorExpr]
                ) [DesignatorStat]
              ) [Statements]
              DesignatorStat(
                DesignatorExpr(
                  Designator(
                    WithoutNamespace(
                     mat
                    ) [WithoutNamespace]
                    AddMatrixExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            DesignatorFact(
                              Designator(
                                WithoutNamespace(
                                 mat
                                ) [WithoutNamespace]
                                AddMatrixExpression(
                                  BraExpr(
                                    PositiveStartExpr(
                                      SingleTerm(
                                        NumberConst(
                                         0
                                        ) [NumberConst]
                                      ) [SingleTerm]
                                    ) [PositiveStartExpr]
                                  ) [BraExpr]
                                  BraExpr(
                                    PositiveStartExpr(
                                      SingleTerm(
                                        NumberConst(
                                         0
                                        ) [NumberConst]
                                      ) [SingleTerm]
                                    ) [PositiveStartExpr]
                                  ) [BraExpr]
                                ) [AddMatrixExpression]
                              ) [Designator]
                            ) [DesignatorFact]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             1
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddMatrixExpression]
                  ) [Designator]
                  AssignOperation(
                  ) [AssignOperation]
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       3
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [DesignatorExpr]
              ) [DesignatorStat]
            ) [Statements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           1
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  SingleTerm(
                    NumberConst(
                     2
                    ) [NumberConst]
                  ) [SingleTerm]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          PrintExpr(
            PositiveStartExpr(
              SingleTerm(
                DesignatorFact(
                  Designator(
                    WithoutNamespace(
                     mat
                    ) [WithoutNamespace]
                    AddMatrixExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             1
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddMatrixExpression]
                  ) [Designator]
                ) [DesignatorFact]
              ) [SingleTerm]
            ) [PositiveStartExpr]
            NoNumConstOpt(
            ) [NoNumConstOpt]
          ) [PrintExpr]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           2
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:36:11,833 - ================ Semanticka obrada ===================
INFO  14:36:11,838 - NEW SYMBOL
INFO  14:36:11,838 - Var niz: Arr of int, 0, 0 on line 2
INFO  14:36:11,838 - NEW SYMBOL
INFO  14:36:11,838 - Var mat: Matrix of int, 1, 0 on line 3
INFO  14:36:11,838 - NEW SYMBOL
INFO  14:36:11,838 - Var c: char, 2, 0 on line 4
INFO  14:36:11,839 - NEW SYMBOL
INFO  14:36:11,839 - Var a: boolean, 3, 0 on line 5
INFO  14:36:11,839 - NEW SYMBOL
INFO  14:36:11,839 - Var in: int, 4, 0 on line 6
INFO  14:36:11,839 - Var mat: Matrix of int, 1, 0 on line 12
INFO  14:36:11,839 - Var mat: Matrix of int, 1, 0 on line 13
ERROR 14:36:11,839 - Symbol nula does not exist on line 13
ERROR 14:36:11,839 - Identifier does not exist  on line 13
ERROR 14:36:11,839 - Symbol jedan does not exist on line 13
ERROR 14:36:11,839 - Identifier does not exist  on line 13
ERROR 14:36:11,839 - Matrix size inside [] must be an Int on line 13
ERROR 14:36:11,840 - Symbol jedan does not exist on line 13
ERROR 14:36:11,840 - Identifier does not exist  on line 13
INFO  14:36:38,057 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:36:38,058 - ================= LEKSICKA ANALIZA =================
INFO  14:36:38,086 - #2 program
INFO  14:36:38,086 - #47 test301
INFO  14:36:38,086 - #3 const
INFO  14:36:38,086 - #47 int
INFO  14:36:38,087 - #47 nula
INFO  14:36:38,087 - #24 =
INFO  14:36:38,087 - #46 0
INFO  14:36:38,087 - #27 ;
INFO  14:36:38,104 - #3 const
INFO  14:36:38,104 - #47 int
INFO  14:36:38,104 - #47 jedan
INFO  14:36:38,104 - #24 =
INFO  14:36:38,104 - #46 1
INFO  14:36:38,104 - #27 ;
INFO  14:36:38,104 - #3 const
INFO  14:36:38,104 - #47 int
INFO  14:36:38,104 - #47 pet
INFO  14:36:38,104 - #24 =
INFO  14:36:38,104 - #46 5
INFO  14:36:38,104 - #27 ;
INFO  14:36:38,105 - #47 int
INFO  14:36:38,105 - #47 niz
INFO  14:36:38,105 - #33 [
INFO  14:36:38,105 - #34 ]
INFO  14:36:38,105 - #27 ;
INFO  14:36:38,106 - #47 char
INFO  14:36:38,106 - #47 nizch
INFO  14:36:38,106 - #33 [
INFO  14:36:38,106 - #34 ]
INFO  14:36:38,106 - #27 ;
INFO  14:36:38,106 - #47 int
INFO  14:36:38,108 - #47 mat
INFO  14:36:38,108 - #33 [
INFO  14:36:38,108 - #34 ]
INFO  14:36:38,108 - #33 [
INFO  14:36:38,108 - #34 ]
INFO  14:36:38,108 - #27 ;
INFO  14:36:38,109 - #47 int
INFO  14:36:38,109 - #47 a
INFO  14:36:38,109 - #27 ;
INFO  14:36:38,110 - #35 {
INFO  14:36:38,110 - #8 void
INFO  14:36:38,110 - #47 main
INFO  14:36:38,111 - #31 (
INFO  14:36:38,111 - #32 )
INFO  14:36:38,111 - #35 {
INFO  14:36:38,112 - #47 mat
INFO  14:36:38,112 - #24 =
INFO  14:36:38,113 - #4 new
INFO  14:36:38,115 - #47 int
INFO  14:36:38,115 - #33 [
INFO  14:36:38,115 - #46 2
INFO  14:36:38,115 - #34 ]
INFO  14:36:38,115 - #33 [
INFO  14:36:38,115 - #46 3
INFO  14:36:38,115 - #34 ]
INFO  14:36:38,115 - #27 ;
INFO  14:36:38,115 - #47 mat
INFO  14:36:38,115 - #33 [
INFO  14:36:38,115 - #47 nula
INFO  14:36:38,116 - #34 ]
INFO  14:36:38,116 - #33 [
INFO  14:36:38,116 - #47 jedan
INFO  14:36:38,116 - #12 -
INFO  14:36:38,116 - #46 1
INFO  14:36:38,116 - #34 ]
INFO  14:36:38,117 - #24 =
INFO  14:36:38,117 - #47 jedan
INFO  14:36:38,117 - #27 ;
INFO  14:36:38,117 - #47 mat
INFO  14:36:38,117 - #33 [
INFO  14:36:38,117 - #46 0
INFO  14:36:38,117 - #34 ]
INFO  14:36:38,117 - #33 [
INFO  14:36:38,117 - #47 mat
INFO  14:36:38,117 - #33 [
INFO  14:36:38,117 - #46 0
INFO  14:36:38,117 - #34 ]
INFO  14:36:38,117 - #33 [
INFO  14:36:38,117 - #46 0
INFO  14:36:38,117 - #34 ]
INFO  14:36:38,117 - #34 ]
INFO  14:36:38,117 - #24 =
INFO  14:36:38,117 - #46 2
INFO  14:36:38,117 - #27 ;
INFO  14:36:38,117 - #47 mat
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #46 0
INFO  14:36:38,118 - #34 ]
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #47 mat
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #46 0
INFO  14:36:38,118 - #34 ]
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #46 1
INFO  14:36:38,118 - #34 ]
INFO  14:36:38,118 - #34 ]
INFO  14:36:38,118 - #24 =
INFO  14:36:38,118 - #46 5
INFO  14:36:38,118 - #27 ;
INFO  14:36:38,118 - #47 mat
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #46 1
INFO  14:36:38,118 - #34 ]
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #47 mat
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #46 0
INFO  14:36:38,118 - #34 ]
INFO  14:36:38,118 - #33 [
INFO  14:36:38,118 - #46 0
INFO  14:36:38,119 - #34 ]
INFO  14:36:38,119 - #13 *
INFO  14:36:38,119 - #46 2
INFO  14:36:38,119 - #34 ]
INFO  14:36:38,119 - #24 =
INFO  14:36:38,119 - #46 4
INFO  14:36:38,120 - #27 ;
INFO  14:36:38,120 - #47 mat
INFO  14:36:38,120 - #33 [
INFO  14:36:38,120 - #47 mat
INFO  14:36:38,120 - #33 [
INFO  14:36:38,120 - #46 0
INFO  14:36:38,120 - #34 ]
INFO  14:36:38,120 - #33 [
INFO  14:36:38,120 - #46 0
INFO  14:36:38,120 - #34 ]
INFO  14:36:38,120 - #34 ]
INFO  14:36:38,120 - #33 [
INFO  14:36:38,120 - #46 1
INFO  14:36:38,120 - #34 ]
INFO  14:36:38,121 - #24 =
INFO  14:36:38,121 - #46 3
INFO  14:36:38,121 - #27 ;
INFO  14:36:38,121 - #47 mat
INFO  14:36:38,121 - #33 [
INFO  14:36:38,121 - #46 1
INFO  14:36:38,121 - #34 ]
INFO  14:36:38,121 - #33 [
INFO  14:36:38,121 - #46 0
INFO  14:36:38,122 - #34 ]
INFO  14:36:38,122 - #24 =
INFO  14:36:38,122 - #46 2
INFO  14:36:38,122 - #27 ;
INFO  14:36:38,122 - #5 print
INFO  14:36:38,122 - #31 (
INFO  14:36:38,122 - #47 mat
INFO  14:36:38,122 - #33 [
INFO  14:36:38,122 - #46 1
INFO  14:36:38,122 - #34 ]
INFO  14:36:38,122 - #33 [
INFO  14:36:38,122 - #46 2
INFO  14:36:38,122 - #34 ]
INFO  14:36:38,122 - #32 )
INFO  14:36:38,123 - #27 ;
INFO  14:36:38,123 - #5 print
INFO  14:36:38,123 - #31 (
INFO  14:36:38,123 - #47 mat
INFO  14:36:38,123 - #33 [
INFO  14:36:38,123 - #46 0
INFO  14:36:38,123 - #34 ]
INFO  14:36:38,123 - #33 [
INFO  14:36:38,123 - #46 2
INFO  14:36:38,123 - #34 ]
INFO  14:36:38,123 - #32 )
INFO  14:36:38,123 - #27 ;
INFO  14:36:38,124 - #36 }
INFO  14:36:38,124 - #36 }
INFO  14:36:38,126 - ================= PARSIRANO STABLO =================
INFO  14:36:38,131 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              Declarations(
                NoDeclarations(
                ) [NoDeclarations]
                ConstantDeclaration(
                  ConDecl(
                    Type(
                     int
                    ) [Type]
                    ConstDef(
                     nula
                      NumConst(
                       0
                      ) [NumConst]
                    ) [ConstDef]
                    NoConstantDeclaration(
                    ) [NoConstantDeclaration]
                  ) [ConDecl]
                ) [ConstantDeclaration]
              ) [Declarations]
              ConstantDeclaration(
                ConDecl(
                  Type(
                   int
                  ) [Type]
                  ConstDef(
                   jedan
                    NumConst(
                     1
                    ) [NumConst]
                  ) [ConstDef]
                  NoConstantDeclaration(
                  ) [NoConstantDeclaration]
                ) [ConDecl]
              ) [ConstantDeclaration]
            ) [Declarations]
            ConstantDeclaration(
              ConDecl(
                Type(
                 int
                ) [Type]
                ConstDef(
                 pet
                  NumConst(
                   5
                  ) [NumConst]
                ) [ConstDef]
                NoConstantDeclaration(
                ) [NoConstantDeclaration]
              ) [ConDecl]
            ) [ConstantDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 niz
                  Brackets(
                  ) [Brackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               nizch
                Brackets(
                ) [Brackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           int
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             mat
              TwoBrackets(
              ) [TwoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           a
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      NoVarDeclarations(
      ) [NoVarDeclarations]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  Statements(
                    Statements(
                      Statements(
                        NoStatements(
                        ) [NoStatements]
                        DesignatorStat(
                          DesignatorExpr(
                            Designator(
                              WithoutNamespace(
                               mat
                              ) [WithoutNamespace]
                              NoArrayExpression(
                              ) [NoArrayExpression]
                            ) [Designator]
                            AssignOperation(
                            ) [AssignOperation]
                            PositiveStartExpr(
                              SingleTerm(
                                NewTypeMat(
                                  Type(
                                   int
                                  ) [Type]
                                  PositiveStartExpr(
                                    SingleTerm(
                                      NumberConst(
                                       2
                                      ) [NumberConst]
                                    ) [SingleTerm]
                                  ) [PositiveStartExpr]
                                  PositiveStartExpr(
                                    SingleTerm(
                                      NumberConst(
                                       3
                                      ) [NumberConst]
                                    ) [SingleTerm]
                                  ) [PositiveStartExpr]
                                ) [NewTypeMat]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [DesignatorExpr]
                        ) [DesignatorStat]
                      ) [Statements]
                      DesignatorStat(
                        DesignatorExpr(
                          Designator(
                            WithoutNamespace(
                             mat
                            ) [WithoutNamespace]
                            AddMatrixExpression(
                              BraExpr(
                                PositiveStartExpr(
                                  SingleTerm(
                                    DesignatorFact(
                                      Designator(
                                        WithoutNamespace(
                                         nula
                                        ) [WithoutNamespace]
                                        NoArrayExpression(
                                        ) [NoArrayExpression]
                                      ) [Designator]
                                    ) [DesignatorFact]
                                  ) [SingleTerm]
                                ) [PositiveStartExpr]
                              ) [BraExpr]
                              BraExpr(
                                AddExpression(
                                  PositiveStartExpr(
                                    SingleTerm(
                                      DesignatorFact(
                                        Designator(
                                          WithoutNamespace(
                                           jedan
                                          ) [WithoutNamespace]
                                          NoArrayExpression(
                                          ) [NoArrayExpression]
                                        ) [Designator]
                                      ) [DesignatorFact]
                                    ) [SingleTerm]
                                  ) [PositiveStartExpr]
                                  Minus(
                                  ) [Minus]
                                  SingleTerm(
                                    NumberConst(
                                     1
                                    ) [NumberConst]
                                  ) [SingleTerm]
                                ) [AddExpression]
                              ) [BraExpr]
                            ) [AddMatrixExpression]
                          ) [Designator]
                          AssignOperation(
                          ) [AssignOperation]
                          PositiveStartExpr(
                            SingleTerm(
                              DesignatorFact(
                                Designator(
                                  WithoutNamespace(
                                   jedan
                                  ) [WithoutNamespace]
                                  NoArrayExpression(
                                  ) [NoArrayExpression]
                                ) [Designator]
                              ) [DesignatorFact]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [DesignatorExpr]
                      ) [DesignatorStat]
                    ) [Statements]
                    DesignatorStat(
                      DesignatorExpr(
                        Designator(
                          WithoutNamespace(
                           mat
                          ) [WithoutNamespace]
                          AddMatrixExpression(
                            BraExpr(
                              PositiveStartExpr(
                                SingleTerm(
                                  NumberConst(
                                   0
                                  ) [NumberConst]
                                ) [SingleTerm]
                              ) [PositiveStartExpr]
                            ) [BraExpr]
                            BraExpr(
                              PositiveStartExpr(
                                SingleTerm(
                                  DesignatorFact(
                                    Designator(
                                      WithoutNamespace(
                                       mat
                                      ) [WithoutNamespace]
                                      AddMatrixExpression(
                                        BraExpr(
                                          PositiveStartExpr(
                                            SingleTerm(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                            ) [SingleTerm]
                                          ) [PositiveStartExpr]
                                        ) [BraExpr]
                                        BraExpr(
                                          PositiveStartExpr(
                                            SingleTerm(
                                              NumberConst(
                                               0
                                              ) [NumberConst]
                                            ) [SingleTerm]
                                          ) [PositiveStartExpr]
                                        ) [BraExpr]
                                      ) [AddMatrixExpression]
                                    ) [Designator]
                                  ) [DesignatorFact]
                                ) [SingleTerm]
                              ) [PositiveStartExpr]
                            ) [BraExpr]
                          ) [AddMatrixExpression]
                        ) [Designator]
                        AssignOperation(
                        ) [AssignOperation]
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [DesignatorExpr]
                    ) [DesignatorStat]
                  ) [Statements]
                  DesignatorStat(
                    DesignatorExpr(
                      Designator(
                        WithoutNamespace(
                         mat
                        ) [WithoutNamespace]
                        AddMatrixExpression(
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                NumberConst(
                                 0
                                ) [NumberConst]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                          BraExpr(
                            PositiveStartExpr(
                              SingleTerm(
                                DesignatorFact(
                                  Designator(
                                    WithoutNamespace(
                                     mat
                                    ) [WithoutNamespace]
                                    AddMatrixExpression(
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             1
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                    ) [AddMatrixExpression]
                                  ) [Designator]
                                ) [DesignatorFact]
                              ) [SingleTerm]
                            ) [PositiveStartExpr]
                          ) [BraExpr]
                        ) [AddMatrixExpression]
                      ) [Designator]
                      AssignOperation(
                      ) [AssignOperation]
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           5
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [DesignatorExpr]
                  ) [DesignatorStat]
                ) [Statements]
                DesignatorStat(
                  DesignatorExpr(
                    Designator(
                      WithoutNamespace(
                       mat
                      ) [WithoutNamespace]
                      AddMatrixExpression(
                        BraExpr(
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               1
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [BraExpr]
                        BraExpr(
                          PositiveStartExpr(
                            MultipleTerms(
                              SingleTerm(
                                DesignatorFact(
                                  Designator(
                                    WithoutNamespace(
                                     mat
                                    ) [WithoutNamespace]
                                    AddMatrixExpression(
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                      BraExpr(
                                        PositiveStartExpr(
                                          SingleTerm(
                                            NumberConst(
                                             0
                                            ) [NumberConst]
                                          ) [SingleTerm]
                                        ) [PositiveStartExpr]
                                      ) [BraExpr]
                                    ) [AddMatrixExpression]
                                  ) [Designator]
                                ) [DesignatorFact]
                              ) [SingleTerm]
                              Multiply(
                              ) [Multiply]
                              NumberConst(
                               2
                              ) [NumberConst]
                            ) [MultipleTerms]
                          ) [PositiveStartExpr]
                        ) [BraExpr]
                      ) [AddMatrixExpression]
                    ) [Designator]
                    AssignOperation(
                    ) [AssignOperation]
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         4
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [DesignatorExpr]
                ) [DesignatorStat]
              ) [Statements]
              DesignatorStat(
                DesignatorExpr(
                  Designator(
                    WithoutNamespace(
                     mat
                    ) [WithoutNamespace]
                    AddMatrixExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            DesignatorFact(
                              Designator(
                                WithoutNamespace(
                                 mat
                                ) [WithoutNamespace]
                                AddMatrixExpression(
                                  BraExpr(
                                    PositiveStartExpr(
                                      SingleTerm(
                                        NumberConst(
                                         0
                                        ) [NumberConst]
                                      ) [SingleTerm]
                                    ) [PositiveStartExpr]
                                  ) [BraExpr]
                                  BraExpr(
                                    PositiveStartExpr(
                                      SingleTerm(
                                        NumberConst(
                                         0
                                        ) [NumberConst]
                                      ) [SingleTerm]
                                    ) [PositiveStartExpr]
                                  ) [BraExpr]
                                ) [AddMatrixExpression]
                              ) [Designator]
                            ) [DesignatorFact]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             1
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddMatrixExpression]
                  ) [Designator]
                  AssignOperation(
                  ) [AssignOperation]
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       3
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [DesignatorExpr]
              ) [DesignatorStat]
            ) [Statements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           1
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  SingleTerm(
                    NumberConst(
                     2
                    ) [NumberConst]
                  ) [SingleTerm]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          PrintExpr(
            PositiveStartExpr(
              SingleTerm(
                DesignatorFact(
                  Designator(
                    WithoutNamespace(
                     mat
                    ) [WithoutNamespace]
                    AddMatrixExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             1
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             2
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddMatrixExpression]
                  ) [Designator]
                ) [DesignatorFact]
              ) [SingleTerm]
            ) [PositiveStartExpr]
            NoNumConstOpt(
            ) [NoNumConstOpt]
          ) [PrintExpr]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   mat
                  ) [WithoutNamespace]
                  AddMatrixExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           2
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddMatrixExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:36:38,131 - ================ Semanticka obrada ===================
INFO  14:36:38,133 - NEW CONST
INFO  14:36:38,135 - Con nula: int, 0, 0 on line 2
INFO  14:36:38,135 - NEW CONST
INFO  14:36:38,135 - Con jedan: int, 1, 0 on line 3
INFO  14:36:38,135 - NEW CONST
INFO  14:36:38,135 - Con pet: int, 5, 0 on line 4
INFO  14:36:38,135 - NEW SYMBOL
INFO  14:36:38,135 - Var niz: Arr of int, 0, 0 on line 6
INFO  14:36:38,135 - NEW SYMBOL
INFO  14:36:38,135 - Var nizch: Arr of char, 1, 0 on line 7
INFO  14:36:38,135 - NEW SYMBOL
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 8
INFO  14:36:38,135 - NEW SYMBOL
INFO  14:36:38,135 - Var a: int, 3, 0 on line 10
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 16
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 17
INFO  14:36:38,135 - Con nula: int, 0, 0 on line 17
INFO  14:36:38,135 - Con jedan: int, 1, 0 on line 17
INFO  14:36:38,135 - Con jedan: int, 1, 0 on line 17
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 18
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 18
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 19
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 19
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 20
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 20
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 21
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 21
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 22
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 24
INFO  14:36:38,135 - Var mat: Matrix of int, 2, 0 on line 25
INFO  14:36:38,135 - Meth main: notype, 0, 0 on line 1
INFO  14:36:38,139 - Parser SUCCESS!
INFO  14:50:07,759 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:50:07,760 - ================= LEKSICKA ANALIZA =================
INFO  14:50:07,787 - #2 program
INFO  14:50:07,787 - #47 test301
INFO  14:50:07,787 - #3 const
INFO  14:50:07,787 - #47 int
INFO  14:50:07,787 - #47 nula
INFO  14:50:07,788 - #24 =
INFO  14:50:07,788 - #46 0
INFO  14:50:07,788 - #27 ;
INFO  14:50:07,788 - #3 const
INFO  14:50:07,788 - #47 int
INFO  14:50:07,788 - #47 jedan
INFO  14:50:07,789 - #24 =
INFO  14:50:07,789 - #46 1
INFO  14:50:07,789 - #27 ;
INFO  14:50:07,789 - #3 const
INFO  14:50:07,789 - #47 int
INFO  14:50:07,789 - #47 pet
INFO  14:50:07,789 - #24 =
INFO  14:50:07,789 - #46 5
INFO  14:50:07,789 - #27 ;
INFO  14:50:07,789 - #47 int
INFO  14:50:07,789 - #47 niz
INFO  14:50:07,789 - #33 [
INFO  14:50:07,789 - #34 ]
INFO  14:50:07,789 - #27 ;
INFO  14:50:07,789 - #47 char
INFO  14:50:07,790 - #47 nizch
INFO  14:50:07,790 - #33 [
INFO  14:50:07,790 - #34 ]
INFO  14:50:07,790 - #27 ;
INFO  14:50:07,790 - #47 int
INFO  14:50:07,790 - #47 mat
INFO  14:50:07,790 - #33 [
INFO  14:50:07,790 - #34 ]
INFO  14:50:07,790 - #33 [
INFO  14:50:07,790 - #34 ]
INFO  14:50:07,790 - #27 ;
INFO  14:50:07,790 - #47 int
INFO  14:50:07,790 - #47 a
INFO  14:50:07,790 - #27 ;
INFO  14:50:07,792 - #35 {
INFO  14:50:07,793 - #8 void
INFO  14:50:07,794 - #47 main
INFO  14:50:07,795 - #31 (
INFO  14:50:07,796 - #32 )
INFO  14:50:07,796 - #47 int
INFO  14:50:07,797 - #47 bodovi
INFO  14:50:07,797 - #27 ;
INFO  14:50:07,797 - #47 bool
INFO  14:50:07,797 - #47 bt
INFO  14:50:07,797 - #27 ;
INFO  14:50:07,797 - #35 {
INFO  14:50:07,797 - #47 bodovi
INFO  14:50:07,797 - #24 =
INFO  14:50:07,798 - #46 0
INFO  14:50:07,798 - #27 ;
INFO  14:50:07,798 - #47 bodovi
INFO  14:50:07,798 - #25 ++
INFO  14:50:07,799 - #27 ;
INFO  14:50:07,799 - #47 bodovi
INFO  14:50:07,799 - #24 =
INFO  14:50:07,799 - #47 bodovi
INFO  14:50:07,799 - #11 +
INFO  14:50:07,799 - #47 jedan
INFO  14:50:07,799 - #27 ;
INFO  14:50:07,799 - #47 bodovi
INFO  14:50:07,799 - #24 =
INFO  14:50:07,799 - #47 bodovi
INFO  14:50:07,799 - #13 *
INFO  14:50:07,801 - #47 pet
INFO  14:50:07,801 - #27 ;
INFO  14:50:07,801 - #47 bodovi
INFO  14:50:07,801 - #26 --
INFO  14:50:07,801 - #27 ;
INFO  14:50:07,801 - #5 print
INFO  14:50:07,801 - #31 (
INFO  14:50:07,801 - #47 bodovi
INFO  14:50:07,801 - #32 )
INFO  14:50:07,802 - #27 ;
INFO  14:50:07,802 - #36 }
INFO  14:50:07,802 - #36 }
INFO  14:50:07,802 - ================= PARSIRANO STABLO =================
INFO  14:50:07,806 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            Declarations(
              Declarations(
                NoDeclarations(
                ) [NoDeclarations]
                ConstantDeclaration(
                  ConDecl(
                    Type(
                     int
                    ) [Type]
                    ConstDef(
                     nula
                      NumConst(
                       0
                      ) [NumConst]
                    ) [ConstDef]
                    NoConstantDeclaration(
                    ) [NoConstantDeclaration]
                  ) [ConDecl]
                ) [ConstantDeclaration]
              ) [Declarations]
              ConstantDeclaration(
                ConDecl(
                  Type(
                   int
                  ) [Type]
                  ConstDef(
                   jedan
                    NumConst(
                     1
                    ) [NumConst]
                  ) [ConstDef]
                  NoConstantDeclaration(
                  ) [NoConstantDeclaration]
                ) [ConDecl]
              ) [ConstantDeclaration]
            ) [Declarations]
            ConstantDeclaration(
              ConDecl(
                Type(
                 int
                ) [Type]
                ConstDef(
                 pet
                  NumConst(
                   5
                  ) [NumConst]
                ) [ConstDef]
                NoConstantDeclaration(
                ) [NoConstantDeclaration]
              ) [ConDecl]
            ) [ConstantDeclaration]
          ) [Declarations]
          VariableDeclaration(
            VarDeclaration(
              Type(
               int
              ) [Type]
              OneVarDeclaration(
                AddVarDecl1(
                 niz
                  Brackets(
                  ) [Brackets]
                ) [AddVarDecl1]
              ) [OneVarDeclaration]
            ) [VarDeclaration]
          ) [VariableDeclaration]
        ) [Declarations]
        VariableDeclaration(
          VarDeclaration(
            Type(
             char
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               nizch
                Brackets(
                ) [Brackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [VariableDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           int
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             mat
              TwoBrackets(
              ) [TwoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         int
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           a
            NoBrackets(
            ) [NoBrackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      ListOfVarDecl(
        ListOfVarDecl(
          NoVarDeclarations(
          ) [NoVarDeclarations]
          VarDeclaration(
            Type(
             int
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               bodovi
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [ListOfVarDecl]
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             bt
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [ListOfVarDecl]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                Statements(
                  NoStatements(
                  ) [NoStatements]
                  DesignatorStat(
                    DesignatorExpr(
                      Designator(
                        WithoutNamespace(
                         bodovi
                        ) [WithoutNamespace]
                        NoArrayExpression(
                        ) [NoArrayExpression]
                      ) [Designator]
                      AssignOperation(
                      ) [AssignOperation]
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           0
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [DesignatorExpr]
                  ) [DesignatorStat]
                ) [Statements]
                DesignatorStat(
                  DesignatorPP(
                    Designator(
                      WithoutNamespace(
                       bodovi
                      ) [WithoutNamespace]
                      NoArrayExpression(
                      ) [NoArrayExpression]
                    ) [Designator]
                  ) [DesignatorPP]
                ) [DesignatorStat]
              ) [Statements]
              DesignatorStat(
                DesignatorExpr(
                  Designator(
                    WithoutNamespace(
                     bodovi
                    ) [WithoutNamespace]
                    NoArrayExpression(
                    ) [NoArrayExpression]
                  ) [Designator]
                  AssignOperation(
                  ) [AssignOperation]
                  AddExpression(
                    PositiveStartExpr(
                      SingleTerm(
                        DesignatorFact(
                          Designator(
                            WithoutNamespace(
                             bodovi
                            ) [WithoutNamespace]
                            NoArrayExpression(
                            ) [NoArrayExpression]
                          ) [Designator]
                        ) [DesignatorFact]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                    Plus(
                    ) [Plus]
                    SingleTerm(
                      DesignatorFact(
                        Designator(
                          WithoutNamespace(
                           jedan
                          ) [WithoutNamespace]
                          NoArrayExpression(
                          ) [NoArrayExpression]
                        ) [Designator]
                      ) [DesignatorFact]
                    ) [SingleTerm]
                  ) [AddExpression]
                ) [DesignatorExpr]
              ) [DesignatorStat]
            ) [Statements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   bodovi
                  ) [WithoutNamespace]
                  NoArrayExpression(
                  ) [NoArrayExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  MultipleTerms(
                    SingleTerm(
                      DesignatorFact(
                        Designator(
                          WithoutNamespace(
                           bodovi
                          ) [WithoutNamespace]
                          NoArrayExpression(
                          ) [NoArrayExpression]
                        ) [Designator]
                      ) [DesignatorFact]
                    ) [SingleTerm]
                    Multiply(
                    ) [Multiply]
                    DesignatorFact(
                      Designator(
                        WithoutNamespace(
                         pet
                        ) [WithoutNamespace]
                        NoArrayExpression(
                        ) [NoArrayExpression]
                      ) [Designator]
                    ) [DesignatorFact]
                  ) [MultipleTerms]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          DesignatorStat(
            DesignatorMM(
              Designator(
                WithoutNamespace(
                 bodovi
                ) [WithoutNamespace]
                NoArrayExpression(
                ) [NoArrayExpression]
              ) [Designator]
            ) [DesignatorMM]
          ) [DesignatorStat]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   bodovi
                  ) [WithoutNamespace]
                  NoArrayExpression(
                  ) [NoArrayExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:50:07,806 - ================ Semanticka obrada ===================
INFO  14:50:07,809 - NEW CONST
INFO  14:50:07,809 - Con nula: int, 0, 0 on line 2
INFO  14:50:07,810 - NEW CONST
INFO  14:50:07,810 - Con jedan: int, 1, 0 on line 3
INFO  14:50:07,810 - NEW CONST
INFO  14:50:07,810 - Con pet: int, 5, 0 on line 4
INFO  14:50:07,810 - NEW SYMBOL
INFO  14:50:07,810 - Var niz: Arr of int, 0, 0 on line 6
INFO  14:50:07,810 - NEW SYMBOL
INFO  14:50:07,810 - Var nizch: Arr of char, 1, 0 on line 7
INFO  14:50:07,810 - NEW SYMBOL
INFO  14:50:07,810 - Var mat: Matrix of int, 2, 0 on line 8
INFO  14:50:07,810 - NEW SYMBOL
INFO  14:50:07,810 - Var a: int, 3, 0 on line 10
INFO  14:50:07,810 - NEW SYMBOL
INFO  14:50:07,810 - Var bodovi: int, 0, 1 on line 15
INFO  14:50:07,810 - NEW SYMBOL
INFO  14:50:07,810 - Var bt: boolean, 1, 1 on line 16
INFO  14:50:07,810 - Var bodovi: int, 0, 1 on line 18
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 19
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 20
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 20
INFO  14:50:07,811 - Con jedan: int, 1, 0 on line 20
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 21
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 21
INFO  14:50:07,811 - Con pet: int, 5, 0 on line 21
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 22
INFO  14:50:07,811 - Var bodovi: int, 0, 1 on line 23
INFO  14:50:07,811 - Meth main: notype, 0, 0 on line 1
INFO  14:50:07,815 - Parser SUCCESS!
