INFO  14:50:56,359 - Compiling source file: C:\Users\elena\Desktop\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  14:50:56,360 - ================= LEKSICKA ANALIZA =================
INFO  14:50:56,410 - #2 program
INFO  14:50:56,410 - #47 test301
INFO  14:50:56,410 - #3 const
INFO  14:50:56,412 - #47 int
INFO  14:50:56,413 - #47 nula
INFO  14:50:56,414 - #24 =
INFO  14:50:56,414 - #46 0
INFO  14:50:56,414 - #27 ;
INFO  14:50:56,418 - #3 const
INFO  14:50:56,418 - #47 int
INFO  14:50:56,418 - #47 jedan
INFO  14:50:56,418 - #24 =
INFO  14:50:56,418 - #46 1
INFO  14:50:56,419 - #27 ;
INFO  14:50:56,419 - #3 const
INFO  14:50:56,419 - #47 int
INFO  14:50:56,419 - #47 pet
INFO  14:50:56,420 - #24 =
INFO  14:50:56,420 - #46 5
INFO  14:50:56,420 - #27 ;
INFO  14:50:56,420 - #47 int
INFO  14:50:56,420 - #47 niz
INFO  14:50:56,421 - #33 [
INFO  14:50:56,421 - #34 ]
INFO  14:50:56,421 - #29 ,
INFO  14:50:56,422 - #47 niz2
INFO  14:50:56,422 - #33 [
INFO  14:50:56,422 - #34 ]
INFO  14:50:56,422 - #27 ;
INFO  14:50:56,422 - #47 char
INFO  14:50:56,424 - #47 nizch
INFO  14:50:56,424 - #33 [
INFO  14:50:56,424 - #34 ]
INFO  14:50:56,424 - #27 ;
INFO  14:50:56,424 - #35 {
INFO  14:50:56,424 - #8 void
INFO  14:50:56,426 - #47 main
INFO  14:50:56,426 - #31 (
INFO  14:50:56,427 - #32 )
INFO  14:50:56,427 - #47 int
INFO  14:50:56,428 - #47 bodovi
INFO  14:50:56,428 - #27 ;
INFO  14:50:56,429 - #47 bool
INFO  14:50:56,429 - #47 bt
INFO  14:50:56,429 - #27 ;
INFO  14:50:56,429 - #35 {
INFO  14:50:56,429 - #47 niz
INFO  14:50:56,430 - #24 =
INFO  14:50:56,433 - #4 new
INFO  14:50:56,434 - #47 int
INFO  14:50:56,434 - #33 [
INFO  14:50:56,434 - #46 3
INFO  14:50:56,434 - #34 ]
INFO  14:50:56,435 - #27 ;
INFO  14:50:56,435 - #47 niz
INFO  14:50:56,435 - #33 [
INFO  14:50:56,435 - #46 0
INFO  14:50:56,435 - #34 ]
INFO  14:50:56,435 - #24 =
INFO  14:50:56,436 - #46 1
INFO  14:50:56,436 - #27 ;
INFO  14:50:56,436 - #47 niz
INFO  14:50:56,436 - #33 [
INFO  14:50:56,436 - #46 1
INFO  14:50:56,436 - #34 ]
INFO  14:50:56,436 - #24 =
INFO  14:50:56,437 - #46 2
INFO  14:50:56,437 - #27 ;
INFO  14:50:56,437 - #47 niz
INFO  14:50:56,437 - #33 [
INFO  14:50:56,437 - #46 2
INFO  14:50:56,437 - #34 ]
INFO  14:50:56,437 - #24 =
INFO  14:50:56,437 - #46 3
INFO  14:50:56,437 - #27 ;
INFO  14:50:56,437 - #5 print
INFO  14:50:56,437 - #31 (
INFO  14:50:56,437 - #47 niz
INFO  14:50:56,437 - #32 )
INFO  14:50:56,439 - #27 ;
INFO  14:50:56,439 - #36 }
INFO  14:50:56,439 - #36 }
INFO  14:50:56,442 - ================= PARSIRANO STABLO =================
INFO  14:50:56,450 - Program(
  ProgName(
   test301
  ) [ProgName]
  NoNamespaceDeclarations(
  ) [NoNamespaceDeclarations]
  Declarations(
    Declarations(
      Declarations(
        Declarations(
          Declarations(
            NoDeclarations(
            ) [NoDeclarations]
            ConstantDeclaration(
              ConDecl(
                Type(
                 int
                ) [Type]
                ConstDef(
                 nula
                  NumConst(
                   0
                  ) [NumConst]
                ) [ConstDef]
                NoConstantDeclaration(
                ) [NoConstantDeclaration]
              ) [ConDecl]
            ) [ConstantDeclaration]
          ) [Declarations]
          ConstantDeclaration(
            ConDecl(
              Type(
               int
              ) [Type]
              ConstDef(
               jedan
                NumConst(
                 1
                ) [NumConst]
              ) [ConstDef]
              NoConstantDeclaration(
              ) [NoConstantDeclaration]
            ) [ConDecl]
          ) [ConstantDeclaration]
        ) [Declarations]
        ConstantDeclaration(
          ConDecl(
            Type(
             int
            ) [Type]
            ConstDef(
             pet
              NumConst(
               5
              ) [NumConst]
            ) [ConstDef]
            NoConstantDeclaration(
            ) [NoConstantDeclaration]
          ) [ConDecl]
        ) [ConstantDeclaration]
      ) [Declarations]
      VariableDeclaration(
        VarDeclaration(
          Type(
           int
          ) [Type]
          MultipleVarDeclarations(
            OneVarDeclaration(
              AddVarDecl1(
               niz
                Brackets(
                ) [Brackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
            AddVarDecl1(
             niz2
              Brackets(
              ) [Brackets]
            ) [AddVarDecl1]
          ) [MultipleVarDeclarations]
        ) [VarDeclaration]
      ) [VariableDeclaration]
    ) [Declarations]
    VariableDeclaration(
      VarDeclaration(
        Type(
         char
        ) [Type]
        OneVarDeclaration(
          AddVarDecl1(
           nizch
            Brackets(
            ) [Brackets]
          ) [AddVarDecl1]
        ) [OneVarDeclaration]
      ) [VarDeclaration]
    ) [VariableDeclaration]
  ) [Declarations]
  MethodDeclarations(
    NoMethodDeclarations(
    ) [NoMethodDeclarations]
    MethodDecl(
      MethodVoid(
      ) [MethodVoid]
      MethodName(
       main
      ) [MethodName]
      NoFormPars(
      ) [NoFormPars]
      ListOfVarDecl(
        ListOfVarDecl(
          NoVarDeclarations(
          ) [NoVarDeclarations]
          VarDeclaration(
            Type(
             int
            ) [Type]
            OneVarDeclaration(
              AddVarDecl1(
               bodovi
                NoBrackets(
                ) [NoBrackets]
              ) [AddVarDecl1]
            ) [OneVarDeclaration]
          ) [VarDeclaration]
        ) [ListOfVarDecl]
        VarDeclaration(
          Type(
           bool
          ) [Type]
          OneVarDeclaration(
            AddVarDecl1(
             bt
              NoBrackets(
              ) [NoBrackets]
            ) [AddVarDecl1]
          ) [OneVarDeclaration]
        ) [VarDeclaration]
      ) [ListOfVarDecl]
      Statements(
        Statements(
          Statements(
            Statements(
              Statements(
                NoStatements(
                ) [NoStatements]
                DesignatorStat(
                  DesignatorExpr(
                    Designator(
                      WithoutNamespace(
                       niz
                      ) [WithoutNamespace]
                      NoArrayExpression(
                      ) [NoArrayExpression]
                    ) [Designator]
                    AssignOperation(
                    ) [AssignOperation]
                    PositiveStartExpr(
                      SingleTerm(
                        NewType(
                          Type(
                           int
                          ) [Type]
                          PositiveStartExpr(
                            SingleTerm(
                              NumberConst(
                               3
                              ) [NumberConst]
                            ) [SingleTerm]
                          ) [PositiveStartExpr]
                        ) [NewType]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [DesignatorExpr]
                ) [DesignatorStat]
              ) [Statements]
              DesignatorStat(
                DesignatorExpr(
                  Designator(
                    WithoutNamespace(
                     niz
                    ) [WithoutNamespace]
                    AddArrayExpression(
                      BraExpr(
                        PositiveStartExpr(
                          SingleTerm(
                            NumberConst(
                             0
                            ) [NumberConst]
                          ) [SingleTerm]
                        ) [PositiveStartExpr]
                      ) [BraExpr]
                    ) [AddArrayExpression]
                  ) [Designator]
                  AssignOperation(
                  ) [AssignOperation]
                  PositiveStartExpr(
                    SingleTerm(
                      NumberConst(
                       1
                      ) [NumberConst]
                    ) [SingleTerm]
                  ) [PositiveStartExpr]
                ) [DesignatorExpr]
              ) [DesignatorStat]
            ) [Statements]
            DesignatorStat(
              DesignatorExpr(
                Designator(
                  WithoutNamespace(
                   niz
                  ) [WithoutNamespace]
                  AddArrayExpression(
                    BraExpr(
                      PositiveStartExpr(
                        SingleTerm(
                          NumberConst(
                           1
                          ) [NumberConst]
                        ) [SingleTerm]
                      ) [PositiveStartExpr]
                    ) [BraExpr]
                  ) [AddArrayExpression]
                ) [Designator]
                AssignOperation(
                ) [AssignOperation]
                PositiveStartExpr(
                  SingleTerm(
                    NumberConst(
                     2
                    ) [NumberConst]
                  ) [SingleTerm]
                ) [PositiveStartExpr]
              ) [DesignatorExpr]
            ) [DesignatorStat]
          ) [Statements]
          DesignatorStat(
            DesignatorExpr(
              Designator(
                WithoutNamespace(
                 niz
                ) [WithoutNamespace]
                AddArrayExpression(
                  BraExpr(
                    PositiveStartExpr(
                      SingleTerm(
                        NumberConst(
                         2
                        ) [NumberConst]
                      ) [SingleTerm]
                    ) [PositiveStartExpr]
                  ) [BraExpr]
                ) [AddArrayExpression]
              ) [Designator]
              AssignOperation(
              ) [AssignOperation]
              PositiveStartExpr(
                SingleTerm(
                  NumberConst(
                   3
                  ) [NumberConst]
                ) [SingleTerm]
              ) [PositiveStartExpr]
            ) [DesignatorExpr]
          ) [DesignatorStat]
        ) [Statements]
        PrintExpr(
          PositiveStartExpr(
            SingleTerm(
              DesignatorFact(
                Designator(
                  WithoutNamespace(
                   niz
                  ) [WithoutNamespace]
                  NoArrayExpression(
                  ) [NoArrayExpression]
                ) [Designator]
              ) [DesignatorFact]
            ) [SingleTerm]
          ) [PositiveStartExpr]
          NoNumConstOpt(
          ) [NoNumConstOpt]
        ) [PrintExpr]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  14:50:56,451 - ================ Semanticka obrada ===================
INFO  14:50:56,456 - NEW CONST
INFO  14:50:56,456 - Con nula: int, 0, 0 on line 5
INFO  14:50:56,456 - NEW CONST
INFO  14:50:56,456 - Con jedan: int, 1, 0 on line 6
INFO  14:50:56,456 - NEW CONST
INFO  14:50:56,456 - Con pet: int, 5, 0 on line 7
INFO  14:50:56,456 - NEW SYMBOL
INFO  14:50:56,456 - Var niz: Arr of int, 0, 0 on line 9
INFO  14:50:56,456 - NEW SYMBOL
INFO  14:50:56,456 - Var niz2: Arr of int, 1, 0 on line 9
INFO  14:50:56,457 - NEW SYMBOL
INFO  14:50:56,457 - Var nizch: Arr of char, 2, 0 on line 10
INFO  14:50:56,457 - NEW SYMBOL
INFO  14:50:56,457 - Var bodovi: int, 0, 1 on line 14
INFO  14:50:56,457 - NEW SYMBOL
INFO  14:50:56,457 - Var bt: boolean, 1, 1 on line 15
INFO  14:50:56,457 - Var niz: Arr of int, 0, 0 on line 17
INFO  14:50:56,457 - Var niz: Arr of int, 0, 0 on line 18
INFO  14:50:56,457 - Var niz: Arr of int, 0, 0 on line 19
INFO  14:50:56,457 - Var niz: Arr of int, 0, 0 on line 20
INFO  14:50:56,457 - Var niz: Arr of int, 0, 0 on line 21
INFO  14:50:56,457 - Meth main: notype, 0, 0 on line 3
INFO  14:50:56,461 - Parser SUCCESS!
